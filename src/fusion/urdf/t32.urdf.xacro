<?xml version="1.0"?>
<robot name="t32" xmlns:xacro="http://ros.org/wiki/xacro">

<!-- <xacro:include filename="control.urdf.xacro"/> -->
<xacro:include filename="gazebo_control.xacro"/>
<xacro:include filename="inertial_macros.urdf.xacro"/>


<xacro:property name="base_width" value="1.0"/>
<xacro:property name="base_length" value="1.0"/>
<xacro:property name="base_height" value="1.0"/>

<xacro:property name="wheel_radius" value="0.1"/>
<xacro:property name="wheel_width" value="0.04"/>
<xacro:property name="wheel_ygap" value="0.025"/>
<xacro:property name="wheel_zoff" value="0.55"/>
<xacro:property name="wheel_xoff" value="0.32"/>

<xacro:property name="caster_xoff" value="0.24"/>



<!-- Robot Base -->
<link name="base_link">
    <visual>
        <geometry>
            <box size="${base_length} ${base_width} ${base_height}"/> 
        </geometry>
        <material name="Cyan">
            <color rgba="0 1.0 1.0 1.0"/>
        </material>
    </visual>
        <collision>
            <origin xyz="0.0 0 0.0"/>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/> 
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.5" x="${base_length}" y="${base_width}" z="${base_height}">
            <origin xyz="0.0 0 0.0"/>
        </xacro:inertial_box>
    
</link>
<gazebo reference="base_link">
        <material>Gazebo/White</material>
</gazebo>
<!-- Robot Footprint -->
<link name="base_footprint"/>

<joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
</joint>

<!-- Wheels -->
<xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
        <visual>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
            <material name="Gray">
                <color rgba="0.5 0.5 0.5 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
        </collision>

        <xacro:inertial_cylinder mass="0.1" length="${wheel_width}" radius="${wheel_radius}">
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        </xacro:inertial_cylinder>
    </link>
    <joint name="${prefix}_joint" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
    </joint>
</xacro:macro>

<xacro:wheel prefix="wheel_left" x_reflect="-1" y_reflect="1"/>
<xacro:wheel prefix="wheel_right" x_reflect="-1" y_reflect="-1"/>



<!-- Caster wheel -->
<link name="front_caster">
    <visual>
        <geometry>
            <sphere radius="${(wheel_radius+wheel_zoff - (base_height/2))}"/>
        </geometry>
        <material name="Cyan">
            <color rgba="0 1.0 1.0 1.0"/>
        </material>
    </visual>
    <collision>
        <geometry>
            <sphere radius="${(wheel_radius+wheel_zoff - (base_height/2))}"/>
        </geometry>
    </collision>
    <xacro:inertial_sphere mass="0.1" radius="${(wheel_radius+wheel_zoff - (base_height/2))}">
        <origin xyz="0 0 0"/>
    </xacro:inertial_sphere>
</link>

<joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
</joint>



<gazebo reference="front_caster">
    <mu1 value="0.001"/>
    <mu2 value="0.001"/>
</gazebo>





<!-- 2D scan -->
<xacro:macro name="lidar" params="prefix x y z R P Y">
    <link name="${prefix}_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder length="0.0315" radius="0.055"/>
            </geometry>
            <material name="dark"/>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder length="0.0315" radius="0.055"/>
            </geometry>
        </collision>

        <xacro:inertial_sphere mass="0.114" radius="0.055">
            <origin xyz="0 0 0"/>
        </xacro:inertial_sphere>
    </link>

    <joint name="${prefix}_joint"  type="fixed">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${x} ${y} ${z}" rpy="${R} ${P} ${Y}"/>
        <axis xyz="0 0 1"/>
    </joint>

</xacro:macro>


<xacro:lidar prefix="scan1" x="-0.54" y="-0.54" z="-0.4" R="0.0" P="0.0" Y="-2.356194" />
<xacro:lidar prefix="scan2" x="0.54" y="0.54" z="-0.4" R="0.0" P="0.0" Y="0.785398"/>

<!-- scan gazebo -->
<gazebo reference="scan1_link">
    <material value="Gazebo/FlatBlack"/>
    <sensor name="scan1" type="ray">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <pose>0 0 0 0 0 0</pose>
        <update_rate>10</update_rate>
        <ray>
        <scan>
            <horizontal>
            <samples>270</samples>
                <resolution>1.000000</resolution>
                <min_angle>-2.35619</min_angle>
                <max_angle>2.35619</max_angle>
            </horizontal>
        </scan>
        <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
        </noise>
        <range>
            <min>0.120000</min>
            <max>15</max>
            <resolution>0.015000</resolution>
        </range>

        </ray>
        <plugin name="laser1" filename="libgazebo_ros_ray_sensor.so">
        <ros>
            <remapping>~/out:=scan_1</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>scan1_link</frame_name>
        </plugin>
    </sensor>
</gazebo>



<gazebo reference="scan2_link">
    <material value="Gazebo/FlatBlack"/>
    <sensor name="scan2" type="ray">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <pose>0 0 0 0 0 0</pose>
        <update_rate>10</update_rate>
        <ray>
        <scan>
            <horizontal>
            <samples>270</samples>
            <resolution>1.000000</resolution>
            <min_angle>-2.35619</min_angle>
            <max_angle>2.35619</max_angle>
            </horizontal>
        </scan>
        <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
        </noise>
        <range>
            <min>0.120000</min>
            <max>15</max>
            <resolution>0.015000</resolution>
        </range>

        </ray>
        <plugin name="laser2" filename="libgazebo_ros_ray_sensor.so">
        <ros>
            <remapping>~/out:=scan_2</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>scan2_link</frame_name>
        </plugin>
    </sensor>
</gazebo>
<!-- !!!!!!!!!!!!!!!1 -->
    <link name="imu_link">
      

    </link>


    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="-0.032 0 0.068 " rpy="0 0 0"/>
        <axis xyz="0 0 1"/>
    </joint>

      <gazebo reference="imu_link">
        <sensor name="tb3_imu" type="imu">
                    <always_on>true</always_on>
                    <update_rate>50</update_rate>
                    <imu>
                    <angular_velocity>
                        <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                        </x>
                        <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                        </y>
                        <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                        </z>
                    </angular_velocity>
                    <linear_acceleration>
                        <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                        </x>
                        <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                        </y>
                        <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                        </z>
                    </linear_acceleration>
                    </imu>
                    <plugin name="turtlebot3_imu" filename="libgazebo_ros_imu_sensor.so">
                    <ros>
                        <!-- <namespace>/tb3</namespace> -->
                        <remapping>~/out:=imu_before</remapping>
                    </ros>
                    <frame_name>imu_link</frame_name>
                    </plugin>
            </sensor>
    </gazebo>
</robot>
